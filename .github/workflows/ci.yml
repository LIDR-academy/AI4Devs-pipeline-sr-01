name: Deploy Backend App to EC2

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for build & tests in CI)
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run tests
        working-directory: ./backend
        run: npm test -- --passWithNoTests

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Add SSH key & known_hosts
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_INSTANCE }}
        run: |
          install -m 600 -D <<<"$PRIVATE_KEY" ~/.ssh/id_ed25519
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Rsync backend to EC2
        env:
          HOST: ${{ secrets.EC2_INSTANCE }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          # Sube solo lo necesario (sin node_modules, tests, etc.)
          rsync -az --delete \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes" \
            --exclude ".git" \
            --exclude "node_modules" \
            --exclude "coverage" \
            --exclude ".env" \
            ./backend/ \
            "$USER@$HOST:/home/$USER/app/backend/"

      - name: Remote setup & restart (Node.js + PM2 + start/restart)
        env:
          HOST: ${{ secrets.EC2_INSTANCE }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes "$USER@$HOST" 'bash -lc "
            set -e

            # === Node.js en Amazon Linux 2023 ===
            sudo dnf -y module enable nodejs:20 || true
            sudo dnf -y install nodejs

            node -v
            npm -v

            # === PM2 global (como root, pero correrá para el usuario normal) ===
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
              # Registrar PM2 en systemd para este usuario
              sudo env PATH=\$PATH:/usr/bin pm2 startup systemd -u '"$USER"' --hp /home/'"$USER"'
            fi

            # === App dir ===
            mkdir -p /home/'"$USER"'/app/backend
            cd /home/'"$USER"'/app/backend

            # Instalar deps de producción
            if [ -f package-lock.json ]; then
              npm ci --omit=dev || npm install --omit=dev
            else
              npm install --omit=dev
            fi

            # === Arrancar o reiniciar con PM2 ===
            # Si existe el proceso 'backend' lo reinicia; si no, lo crea.
            if pm2 describe backend >/dev/null 2>&1; then
              pm2 reload backend --update-env
            else
              # Ajusta el entrypoint si es distinto (por ejemplo dist/index.js)
              # Si tu build deja el entrypoint en dist/index.js:
              if [ -f dist/index.js ]; then
                pm2 start dist/index.js --name backend
              else
                pm2 start index.js --name backend
              fi
            fi

            pm2 save
            pm2 status
          "'


