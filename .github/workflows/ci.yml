name: Deploy Backend App to EC2

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'

    - name: Install dependencies
      run: npm install
      working-directory: ./backend

    - name: Run tests
      run: npm test -- --passWithNoTests
      working-directory: ./backend

    - name: Build application
      run: npm run build
      working-directory: ./backend
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
        aws-region: 'eu-north-1'

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_INSTANCE }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        # Crear archivo de clave privada
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Crear directorio de despliegue si no existe
        #ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST 'mkdir -p react-app'
        
        # Transferir archivos construidos
        #scp -o StrictHostKeyChecking=no -i private_key.pem -r dist/* $USER@$HOST:react-app
        
        # Limpiar archivo de clave
        #rm -f private_key.pem

        # Creamos el directorio de despliegue en el servidor si no existe
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST "mkdir -p ~/app/backend"

        # Usamos rsync para una transferencia de archivos eficiente.
        # Sincronizamos la carpeta 'dist' del backend y los archivos de dependencias.
        rsync -avz -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" --delete \
          ./backend/dist/ \
          ./backend/package.json \
          ./backend/package-lock.json \
          $USER@$HOST:~/app/backend/

        # Nos conectamos a la instancia para instalar dependencias y reiniciar la aplicación
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
        cd ~/app/backend
        npm install --omit=dev
        # Asumimos que usas pm2 para gestionar tu aplicación.
        # 'pm2 reload <app_name>' reinicia la app sin downtime.
        # Cambia 'backend' por el nombre de tu proceso en pm2.
        pm2 reload backend --silent
        EOF

