name: Deploy Backend App to EC2

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for build & tests in CI)
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run tests
        working-directory: ./backend
        run: npm test -- --passWithNoTests

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-region: 'eu-north-1'
  
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_INSTANCE }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          # Crear archivo de clave privada
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # 1. Crear un directorio apropiado para el backend en el servidor
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST "mkdir -p ~/app/backend"

          # 2. Usar rsync para transferir los archivos de build (desde backend/dist) y de dependencias
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i private_key.pem" --delete \
            ./backend/dist/ \
            ./backend/package.json \
            ./backend/package-lock.json \
            $USER@$HOST:~/app/backend/

          # 3. Conectarse al servidor para instalar dependencias y reiniciar la aplicaci√≥n
          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
          # Cargar el entorno de NVM para poder usar npm y pm2
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          
          # Moverse al directorio de la app, instalar dependencias y reiniciar
          cd ~/app/backend
          npm install --omit=dev
          pm2 reload backend --silent
          EOF

          rm -f private_key.pem

