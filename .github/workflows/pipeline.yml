name: CI/CD Pipeline - LTI Backend Deployment

# Trigger: Se ejecuta en push a ramas que tienen PR abierto
on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

# Variables de entorno globales
env:
  NODE_VERSION: '18'
  BACKEND_DIR: './backend'

jobs:
  # JOB 1: TESTS - Ejecutar pruebas del backend
  tests:
    name: 🧪 Run Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      # Checkout del código fuente
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Configurar Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

      # Instalar dependencias del backend
      - name: 📦 Install backend dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      # Generar cliente de Prisma
      - name: 🔧 Generate Prisma client
        working-directory: ${{ env.BACKEND_DIR }}
        run: npx prisma generate

      # Ejecutar tests
      - name: 🧪 Run tests
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm test

      # Subir reporte de cobertura (opcional)
      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ${{ env.BACKEND_DIR }}/coverage/

  # JOB 2: BUILD - Compilar aplicación (solo si tests pasan)
  build:
    name: 🏗️ Build Backend Application
    runs-on: ubuntu-latest
    needs: tests # Depende del job tests
    
    steps:
      # Checkout del código fuente
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Configurar Node.js
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

      # Instalar dependencias del backend
      - name: 📦 Install backend dependencies
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm ci

      # Generar cliente de Prisma
      - name: 🔧 Generate Prisma client
        working-directory: ${{ env.BACKEND_DIR }}
        run: npx prisma generate

      # Compilar aplicación TypeScript
      - name: 🏗️ Build backend application
        working-directory: ${{ env.BACKEND_DIR }}
        run: npm run build

      # Verificar que el build se generó correctamente
      - name: ✅ Verify build output
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Build failed: dist/index.js not found"
            exit 1
          fi
          echo "✅ Build successful: dist/index.js found"

      # Guardar artefactos del build
      - name: 💾 Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            ${{ env.BACKEND_DIR }}/dist/
            ${{ env.BACKEND_DIR }}/package.json
            ${{ env.BACKEND_DIR }}/package-lock.json
            ${{ env.BACKEND_DIR }}/prisma/
          retention-days: 1

  # JOB 3: DEPLOY - Desplegar en EC2 (solo si build es exitoso)
  deploy:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    needs: build # Depende del job build
    if: github.ref == 'refs/heads/main' # Solo deploy en main branch
    
    steps:
      # Checkout del código fuente
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Descargar artefactos del build
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ${{ env.BACKEND_DIR }}/

      # Configurar clave SSH para conexión a EC2
      - name: 🔑 Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # Crear directorio de aplicación en EC2
      - name: 📁 Create application directory on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            sudo mkdir -p /opt/lti-backend
            sudo chown $USER:$USER /opt/lti-backend
          '

      # Copiar archivos al servidor EC2
      - name: 📤 Copy files to EC2
        run: |
          # Copiar archivos de la aplicación
          scp -i ~/.ssh/id_rsa -r ${{ env.BACKEND_DIR }}/dist/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/lti-backend/
          scp -i ~/.ssh/id_rsa ${{ env.BACKEND_DIR }}/package*.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/lti-backend/
          scp -i ~/.ssh/id_rsa -r ${{ env.BACKEND_DIR }}/prisma/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/lti-backend/

      # Instalar dependencias y configurar aplicación en EC2
      - name: ⚙️ Setup application on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            cd /opt/lti-backend
            
            # Instalar Node.js si no está instalado
            if ! command -v node &> /dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Instalar PM2 globalmente si no está instalado
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi
            
            # Instalar solo dependencias de producción
            npm ci --only=production
            
            # Configurar variables de entorno
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "PORT=3010" >> .env
            echo "NODE_ENV=production" >> .env
            
            # Generar cliente de Prisma
            npx prisma generate
          '

      # Ejecutar migraciones de base de datos
      - name: 🗄️ Run database migrations
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            cd /opt/lti-backend
            npx prisma migrate deploy
          '

      # Reiniciar aplicación con PM2
      - name: 🔄 Restart application with PM2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            cd /opt/lti-backend
            
            # Detener aplicación existente si está corriendo
            pm2 stop lti-backend || true
            pm2 delete lti-backend || true
            
            # Iniciar aplicación con PM2
            pm2 start dist/index.js --name "lti-backend" --time
            
            # Guardar configuración de PM2
            pm2 save
            pm2 startup
          '

      # Verificar que la aplicación esté corriendo
      - name: 🔍 Health check
        run: |
          sleep 30 # Esperar a que la aplicación inicie
          
          # Verificar que la aplicación responde
          if curl -f http://${{ secrets.EC2_HOST }}:3010/health > /dev/null 2>&1; then
            echo "✅ Application is running successfully!"
          else
            echo "❌ Health check failed"
            # Mostrar logs en caso de error
            ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'pm2 logs lti-backend --lines 50'
            exit 1
          fi

      # Limpiar archivos temporales
      - name: 🧹 Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -rf ${{ env.BACKEND_DIR }}/dist/

  # Notificación de resultado
  notify:
    name: 📢 Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [tests, build, deploy]
    if: always()
    
    steps:
      - name: 📢 Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Deployment completed successfully!"
            echo "🌐 Application is running at: http://${{ secrets.EC2_HOST }}:3010"
          elif [ "${{ needs.tests.result }}" == "failure" ]; then
            echo "❌ Tests failed - Deployment aborted"
          elif [ "${{ needs.build.result }}" == "failure" ]; then
            echo "❌ Build failed - Deployment aborted"
          else
            echo "❌ Deployment failed"
          fi
