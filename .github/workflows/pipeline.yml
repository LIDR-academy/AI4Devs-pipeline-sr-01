name: LTI Pipeline

on:
  push:
    branches:
      - pipeline-ASM
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Configurar Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3) Backend - instalar dependencias, test y build
      - name: Install backend dependencies
        working-directory: backend
        run: npm install

      - name: Run backend tests
        working-directory: backend
        run: npm test

      - name: Build backend
        working-directory: backend
        run: npm run build

      # 4) Frontend - instalar dependencias y build
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      # 5) Configurar credenciales AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
          aws-region: eu-north-1   # Estocolmo

      # 6) Obtener Instance ID de la IP pública
      - name: Get EC2 Instance ID
        id: get_instance_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ secrets.EC2_INSTANCE }}" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      # 7) Deploy en EC2 usando SSM (sin PEM)
      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --targets "Key=instanceIds,Values=${{ steps.get_instance_id.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy backend and frontend" \
            --parameters 'commands=["bash -lc \"echo c2V0IC1lCgojIEhlcnJhbWllbnRhcyBiYXNlCnN1ZG8geXVtIC15IGluc3RhbGwgZ2l0CgojIE5vZGUgMjAgKHBvciBzaSBsYSBBTUkgbm8gbG8gdHJhZSkKY3VybCAtZnNTTCBodHRwczovL3JwbS5ub2Rlc291cmNlLmNvbS9zZXR1cF8yMC54IHwgc3VkbyBiYXNoIC0Kc3VkbyB5dW0gLXkgaW5zdGFsbCBub2RlanMKCiMgQ8OzZGlnbwpjZCB+CmlmIFsgISAtZCAiQUk0RGV2cy13ZWVrMTItcGlwZWxpbmUtc3ItMDEiIF07IHRoZW4KICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2FkcmlhbnNlbmRpbi9BSTREZXZzLXdlZWsxMi1waXBlbGluZS1zci0wMS5naXQKZmkKCmNkIEFJNERldnMtd2VlazEyLXBpcGVsaW5lLXNyLTAxCmdpdCBmZXRjaCBvcmlnaW4gcGlwZWxpbmUtQVNNCmdpdCBjaGVja291dCBwaXBlbGluZS1BU00KZ2l0IHB1bGwgLS1mZi1vbmx5IG9yaWdpbiBwaXBlbGluZS1BU00KCiMgQmFja2VuZApjZCBiYWNrZW5kCm5wbSBjaQpucG0gcnVuIGJ1aWxkCiMgbWF0YXIgYmFja2VuZCBwcmV2aW8gc2kgZXN0dXZpZXJhCihwa2lsbCAtZiAibm9kZSBkaXN0L2luZGV4LmpzIiB8fCB0cnVlKQpub2h1cCBucG0gc3RhcnQgPiB+L2JhY2tlbmQubG9nIDI+JjEgJgoKIyBGcm9udGVuZApjZCAuLi9mcm9udGVuZApucG0gY2kKbnBtIHJ1biBidWlsZAojIHNlcnZpciBlc3TDoXRpY28gY29uIHNlcnZlIChsb2NhbCwgc2luIHN1ZG8pCm5weCAtLXllcyBzZXJ2ZUAxNCAtcyBidWlsZCAtbCAzMDAwID4gfi9mcm9udGVuZC5sb2cgMj4mMSAmCg==\" | base64 -d > /home/ec2-user/deploy.sh && chmod +x /home/ec2-user/deploy.sh && /home/ec2-user/deploy.sh"]'
