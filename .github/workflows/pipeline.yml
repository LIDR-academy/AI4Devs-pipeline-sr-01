name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: eu-north-1
  NODE_VERSION: 22.19.0

jobs:
  test-backend:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run prisma:generate

      - name: Run tests
        run: npm test

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test-backend
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run prisma:generate

      - name: Build TypeScript
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 1

  deploy-backend:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-backend
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: ./dist

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Test SSH connection and add host key
          echo "Testing SSH connection to ${{ secrets.EC2_HOST }}..."
          ssh-keyscan -H -p 22 ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts || {
            echo "Failed to scan host key for ${{ secrets.EC2_HOST }}"
            echo "Please check:"
            echo "1. EC2_HOST secret is correct (IP or domain)"
            echo "2. EC2 instance is running"
            echo "3. Security group allows SSH on port 22"
            echo "4. EC2 instance has public IP"
            exit 1
          }

          # Test SSH connection
          ssh -o ConnectTimeout=10 -o BatchMode=yes ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'" || {
            echo "SSH connection failed"
            echo "Please check:"
            echo "1. EC2_SSH_KEY secret contains the correct private key"
            echo "2. EC2_USER secret is correct (ec2-user, ubuntu, etc.)"
            echo "3. SSH key is properly configured on EC2 instance"
            exit 1
          }

      - name: Create production package.json
        run: |
          cd backend
          # Create minimal package.json for production
          cat > ../dist/package.json << EOF
          {
            "name": "backend",
            "version": "1.0.0",
            "main": "index.js",
            "scripts": {
              "start": "node index.js"
            },
            "dependencies": {
              "@prisma/client": "^5.13.0",
              "cors": "^2.8.5",
              "dotenv": "^16.4.5",
              "express": "^4.19.2",
              "multer": "^1.4.5-lts.1",
              "swagger-jsdoc": "^6.2.8",
              "swagger-ui-express": "^5.0.0"
            }
          }
          EOF

          # Copy package-lock.json if it exists for better dependency resolution
          if [ -f "package-lock.json" ]; then
            echo "Copying package-lock.json for better dependency resolution..."
            cp package-lock.json ../dist/
          else
            echo "No package-lock.json found, will use npm install"
          fi

      - name: Deploy to EC2
        run: |
          echo "Starting deployment to EC2..."

          # Copy files to EC2
          echo "Copying files to EC2..."
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" \
            ./dist/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/backend/ || {
            echo "Failed to copy files to EC2"
            exit 1
          }

          # Install production dependencies and start the service
          echo "Installing dependencies and starting service..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "Connected to EC2 instance"
            
            cd ~/backend
            echo "Current directory: $(pwd)"
            echo "Files in directory:"
            ls -la
            
            # Check if package.json exists
            if [ ! -f "package.json" ]; then
              echo "Error: package.json not found"
              exit 1
            fi
            
            # Install production dependencies
            echo "Installing production dependencies..."
            if [ -f "package-lock.json" ]; then
              echo "Using npm ci with package-lock.json..."
              npm ci --omit=dev
            else
              echo "Using npm install (no package-lock.json found)..."
              npm install --omit=dev
            fi
            
            # Generate Prisma client
            echo "Generating Prisma client..."
            npx prisma generate
            
            # Run migrations
            echo "Running database migrations..."
            npx prisma migrate deploy
            
            # Kill existing process if running
            echo "Stopping existing processes..."
            pkill -f "node.*index.js" || true
            sleep 2
            
            # Start the application
            echo "Starting application..."
            nohup npm start > app.log 2>&1 &
            sleep 3
            
            # Check if process is running
            if pgrep -f "node.*index.js" > /dev/null; then
              echo "✅ Backend deployed and started successfully"
              echo "Process ID: $(pgrep -f 'node.*index.js')"
            else
              echo "❌ Failed to start application"
              echo "App log:"
              cat app.log || echo "No log file found"
              exit 1
            fi
          EOF

  health-check:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for service to start
        run: sleep 10

      - name: Health check
        run: |
          # Test the API endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:3010/)
          if [ "$response" = "200" ]; then
            echo "✅ API is responding correctly (HTTP 200)"
            # Test response content
            content=$(curl -s http://${{ secrets.EC2_HOST }}:3010/)
            if [[ "$content" == *"Hola LTI!"* ]]; then
              echo "✅ API content is correct"
            else
              echo "❌ API content is incorrect: $content"
              exit 1
            fi
          else
            echo "❌ API is not responding correctly (HTTP $response)"
            exit 1
          fi

      - name: Test API endpoints
        run: |
          # Test positions endpoint
          positions_response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:3010/positions/)
          if [ "$positions_response" = "200" ]; then
            echo "✅ Positions endpoint is working"
          else
            echo "❌ Positions endpoint failed (HTTP $positions_response)"
            exit 1
          fi

          # Test candidates endpoint
          candidates_response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:3010/candidates/)
          if [ "$candidates_response" = "200" ]; then
            echo "✅ Candidates endpoint is working"
          else
            echo "❌ Candidates endpoint failed (HTTP $candidates_response)"
            exit 1
          fi
